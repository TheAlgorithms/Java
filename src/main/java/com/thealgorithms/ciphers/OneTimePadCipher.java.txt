package com.thealgorithms.ciphers;

import java.security.SecureRandom;

/**
 * Implementation of the One-Time Pad Cipher.
 *
 * <p>The One-Time Pad Cipher is a symmetric encryption technique that XORs
 * plaintext with a truly random key of equal length. It is considered
 * theoretically unbreakable when the key is random, used only once, and kept
 * secret.
 *
 * <p>Example:
 *
 * <pre>
 * Plaintext:  HELLO
 * Key:        XMCKL
 * Ciphertext: EQNVZ
 * </pre>
 *
 * @see <a href="https://en.wikipedia.org/wiki/One-time_pad">Wikipedia: One-time pad</a>
 */
public final class OneTimePadCipher {

    private static final SecureRandom RANDOM = new SecureRandom();

    private OneTimePadCipher() {
        // Utility class; prevent instantiation.
    }

    /**
     * Encrypts or decrypts a message using the One-Time Pad method.
     *
     * @param input the input string (plaintext or ciphertext)
     * @param key the key (must be the same length as input)
     * @return the resulting encrypted/decrypted string
     * @throws IllegalArgumentException if input and key lengths do not match
     */
    public static String xorCipher(String input, String key) {
        if (input.length() != key.length()) {
            throw new IllegalArgumentException("Input and key lengths must match!");
        }

        StringBuilder output = new StringBuilder();
        for (int i = 0; i < input.length(); i++) {
            char encryptedChar = (char) (input.charAt(i) ^ key.charAt(i));
            output.append(encryptedChar);
        }
        return output.toString();
    }

    /**
     * Generates a random key of the same length as the message.
     *
     * @param length the desired key length
     * @return a random key string
     */
    public static String generateRandomKey(int length) {
        StringBuilder key = new StringBuilder();
        for (int i = 0; i < length; i++) {
            // Generate printable ASCII range (32â€“126)
            key.append((char) (RANDOM.nextInt(95) + 32));
        }
        return key.toString();
    }
}
